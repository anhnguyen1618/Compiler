%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 

%nonterm  exp
	| program
	| lvalue
	| record
	| array
	| sequence
	| fncallexp
	| mathexp
	| compexp
	| boolexp
	| assign
	| control
	| decs
	| dec
	| vardec
	| fundec
	| tydec
	| ty
	| tyfields
	| tyfieldstail
	| args
	| argtail
	| seqexp
	| seqexptail
	| fields
	| listexp
	| listexptail

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

(* This is a skeleton grammar file, meant to illustrate what kind of
 * declarations are necessary above the %% mark.  Students are expected
 *  to replace the two dummy productions below with an actual grammar. 
 *)

program	: exp				()

	
exp: 			()

decs : () ()
	| dec decs ()
			    
dec : tydec ()
    | vardec ()
    | fundec ()

ty : ID ()
   | LBRACE tyfields RBRACE ()
   | ARRAY OF ID ()

tyfields: () ()
	| ID COLON ty tyfield ()

tyfieldstail : () ()
		| COMMA ID COLON ty tyfieldstail ()
			

tydec : TYPE ID EQ ty ()

fundec : FUNCTION ID LPAREN tyfields RPAREN EQ exp ()
       | FUNCTION ID LPAREN tyfields RPAREN COLON ty EQ exp ()

vardec: VAR ID ASSIGN exp
      | VAR ID COLON ty ASSIGN exp
	     
lvalue : ID ()
       | lvalue DOT ID ()
       | lvalue LBRACK exp RBRACK ()
		
fields : ID EQ exp
       | fields COMMA fields

record : ID LBRACE fields RBRACE ()

array : ty LBRACK exp RBRACK OF exp ()
	   
args: () ()
       | exp argtail

argtail : () ()
	   | COMMA exp argtail ()

seqexp: exp seqexptail

seqexptail: () ()
	     | SEMICOLON exp seqexptail ()

sequence : LPAREN seqexp RPAREN ()
		  
fncallexp : ID LPAREN args LPAREN ()

mathexp : exp PLUS exp ()
	| exp MINUS exp ()
	| exp TIMES exp ()
	| exp DEVIDE exp ()

compexp : exp EQ exp ()
	| exp NEQ exp ()
	| exp LT exp ()
	| exp LE exp ()
	| exp GT exp ()
	| exp GE exp ()

boolexp : exp AND exp ()
	| exp OR exp ()
	      
assign : lvalue ASSIGN exp ()

control : IF exp THEN exp ELSE exp ()
	| IF exp THEN exp ()
	| WHILE exp DO exp ()
	| FOR ID ASSIGN exp TO exp DO exp ()
	| BREAK ()
	| LET decs IN expseq END ()
		    
	   
	    
		
		
